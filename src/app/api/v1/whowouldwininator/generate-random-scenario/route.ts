import { createOpenAI } from '@ai-sdk/openai';
import { generateObject } from 'ai';
import { NextResponse } from 'next/server';
import { z } from 'zod';

const RandomScenarioSchema = z.object({
  setting: z.string().describe('The battle setting and environment'),
  rules: z.string().describe('The battle rules and victory conditions'),
  obstacles: z.string().describe('Environmental hazards and obstacles'),
  limitations: z.string().describe('Power restrictions and limitations'),
  additionalContext: z.string().describe('Additional context and special circumstances'),
});

// Large list of scenario categories to choose from
const SCENARIO_CATEGORIES = [
  'ancient colosseum',
  'floating sky platform',
  'underwater city',
  'volcanic crater',
  'frozen wasteland',
  'dense jungle',
  'desert oasis',
  'mountain peak',
  'space station',
  'alien planet',
  'cyberpunk city',
  'medieval castle',
  'post-apocalyptic ruins',
  'magical forest',
  'crystal cavern',
  'steampunk airship',
  'interdimensional void',
  'time-loop arena',
  'gravity-defying chamber',
  'energy storm field',
  'mirror dimension',
  'pocket universe',
  'dream realm',
  'nightmare landscape',
  'elemental plane',
  'abandoned laboratory',
  'haunted mansion',
  'pirate ship',
  'ninja village',
  'gladiator arena',
  'robot factory',
  'wizard tower',
  'dragon lair',
  'vampire castle',
  'werewolf forest',
  'zombie apocalypse city',
  'superhero headquarters',
  'villain base',
  'military compound',
  'space battlefield',
  'underwater trench',
  'cloud city',
  'lava tubes',
  'ice palace',
  'sand dunes',
  'rocky canyon',
  'bamboo forest',
  'swamp marsh',
  'tundra plains',
  'coral reef',
  'asteroid field',
  'black hole vicinity',
  'neutron star orbit',
  'galactic center',
  'wormhole junction',
  'parallel dimension',
  'quantum realm',
  'microscopic world',
  'giant realm',
  'fairy kingdom',
  'demon realm',
  'angel sanctuary',
  'purgatory',
  'limbo',
  'heaven',
  'hell',
  'earth core',
  'ocean floor',
  'mountain range',
  'valley of death',
  'river of time',
  'desert of souls',
  'forest of whispers',
  'cave of echoes',
  'tower of babel',
  'bridge of sighs',
  'labyrinth of mirrors',
  'maze of madness',
  'prison of shadows',
  'garden of eden',
  'fountain of youth',
  'tree of life',
  'river styx',
  'elysian fields',
  'valhalla',
  'asgard',
  'olympus',
  'atlantis',
  'lemuria',
  'shangri-la',
  'el dorado',
  'camelot',
  'avalon',
  'narnia',
  'wonderland',
  'neverland',
  'oz',
  'middle earth',
  'gotham city',
  'metropolis',
  'wakanda',
  'asgard',
  'krypton',
  'pandora',
  'tatooine',
  'hoth',
  'endor',
  'naboo',
  'coruscant',
  'kamino',
  'mustafar',
  'dagobah',
  'bespin',
  'jakku',
  'crait',
  'exegol',
  'mandalore',
  'ryloth',
  'kashyyyk',
  'geonosis',
  'utapau',
  'felucia',
  'mygeeto',
  'cato neimoidia',
  'saleucami',
  'boz pity',
  'cybertron',
  'earth',
  'mars',
  'venus',
  'jupiter',
  'saturn',
  'uranus',
  'neptune',
  'pluto',
  'mercury',
  'sun',
  'moon',
  'europa',
  'titan',
  'io',
  'ganymede',
  'callisto',
  'enceladus',
  'triton',
  'charon',
  'ceres',
  'vesta',
  'pallas',
  'juno',
  'hygiea',
  'eris',
  'makemake',
  'haumea',
  'sedna',
  'quaoar',
  'varuna',
  'ixion',
  'orcus',
  'chaos',
  'alpha centauri',
  'proxima centauri',
  'betelgeuse',
  'rigel',
  'vega',
  'altair',
  'deneb',
  'spica',
  'antares',
  'arcturus',
  'capella',
  'aldebaran',
  'pollux',
  'fomalhaut',
  'regulus',
  'adhara',
  'castor',
  'gacrux',
  'bellatrix',
  'elnath',
  'miaplacidus',
  'alnilam',
  'regor',
  'alnair',
  'alioth',
  'alnitak',
  'dubhe',
  'mirfak',
  'wezen',
  'sargas',
  'kaus australis',
  'avior',
  'alkaid',
  'menkalinan',
  'atria',
  'alhena',
  'peacock',
  'alsephina',
  'mirzam',
  'polaris',
  'alphard',
  'hamal',
  'almaaz',
  'rasalgethi',
  'eltanin',
  'schedar',
  'naos',
  'almach',
  'caph',
  'izar',
];

export async function POST() {
  try {
    const openaiClient = createOpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });

    // Choose a random scenario category
    const randomCategory =
      SCENARIO_CATEGORIES[Math.floor(Math.random() * SCENARIO_CATEGORIES.length)];

    // Generate scenario based on the category
    const result = await generateObject({
      model: openaiClient('gpt-4o-mini'),
      schema: RandomScenarioSchema,
      prompt: `Generate a creative and interesting battle scenario set in or around ${randomCategory}. 

The scenario should include:
- Setting: A detailed description of the battle environment and location
- Rules: Specific victory conditions and combat rules (not just "fight until knockout")
- Obstacles: Environmental hazards, traps, or challenges that affect the battle
- Limitations: Power restrictions, equipment limitations, or special conditions
- Additional Context: Special circumstances, motivations, or unique elements

Make the scenario creative, engaging, and suitable for an epic battle between powerful characters. The scenario should add interesting tactical elements and not just be a standard fight.

Examples of good scenarios:
- A battle on a collapsing bridge over lava where fighters must also avoid falling debris
- A contest in a gravity-shifting room where the direction of gravity changes every 30 seconds
- A fight in a hall of mirrors where illusions and reflections confuse the combatants
- A battle during a solar eclipse that temporarily drains magical powers

Be creative and make it memorable!`,
      temperature: 0.9, // High temperature for creative variety
      maxTokens: 500,
    });

    return NextResponse.json({
      setting: result.object.setting,
      rules: result.object.rules,
      obstacles: result.object.obstacles,
      limitations: result.object.limitations,
      additionalContext: result.object.additionalContext,
      category: randomCategory,
    });
  } catch (error) {
    console.error('Error generating random scenario:', error);
    return NextResponse.json({ error: 'Failed to generate random scenario' }, { status: 500 });
  }
}
